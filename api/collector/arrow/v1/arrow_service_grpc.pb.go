// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventsServiceClient is the client API for EventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsServiceClient interface {
	// The EventStream endpoint is a bi-directional stream used to send batch of events (`BatchEvent`) from the exporter
	// to the collector. The collector returns `BatchStatus` messages to acknowledge the `BatchEvent` messages received.
	EventStream(ctx context.Context, opts ...grpc.CallOption) (EventsService_EventStreamClient, error)
}

type eventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsServiceClient(cc grpc.ClientConnInterface) EventsServiceClient {
	return &eventsServiceClient{cc}
}

func (c *eventsServiceClient) EventStream(ctx context.Context, opts ...grpc.CallOption) (EventsService_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventsService_ServiceDesc.Streams[0], "/opentelemetry.proto.collector.arrow.v1.EventsService/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsServiceEventStreamClient{stream}
	return x, nil
}

type EventsService_EventStreamClient interface {
	Send(*BatchEvent) error
	Recv() (*BatchStatus, error)
	grpc.ClientStream
}

type eventsServiceEventStreamClient struct {
	grpc.ClientStream
}

func (x *eventsServiceEventStreamClient) Send(m *BatchEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventsServiceEventStreamClient) Recv() (*BatchStatus, error) {
	m := new(BatchStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventsServiceServer is the server API for EventsService service.
// All implementations must embed UnimplementedEventsServiceServer
// for forward compatibility
type EventsServiceServer interface {
	// The EventStream endpoint is a bi-directional stream used to send batch of events (`BatchEvent`) from the exporter
	// to the collector. The collector returns `BatchStatus` messages to acknowledge the `BatchEvent` messages received.
	EventStream(EventsService_EventStreamServer) error
	mustEmbedUnimplementedEventsServiceServer()
}

// UnimplementedEventsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventsServiceServer struct {
}

func (UnimplementedEventsServiceServer) EventStream(EventsService_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedEventsServiceServer) mustEmbedUnimplementedEventsServiceServer() {}

// UnsafeEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServiceServer will
// result in compilation errors.
type UnsafeEventsServiceServer interface {
	mustEmbedUnimplementedEventsServiceServer()
}

func RegisterEventsServiceServer(s grpc.ServiceRegistrar, srv EventsServiceServer) {
	s.RegisterService(&EventsService_ServiceDesc, srv)
}

func _EventsService_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsServiceServer).EventStream(&eventsServiceEventStreamServer{stream})
}

type EventsService_EventStreamServer interface {
	Send(*BatchStatus) error
	Recv() (*BatchEvent, error)
	grpc.ServerStream
}

type eventsServiceEventStreamServer struct {
	grpc.ServerStream
}

func (x *eventsServiceEventStreamServer) Send(m *BatchStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventsServiceEventStreamServer) Recv() (*BatchEvent, error) {
	m := new(BatchEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventsService_ServiceDesc is the grpc.ServiceDesc for EventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opentelemetry.proto.collector.arrow.v1.EventsService",
	HandlerType: (*EventsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _EventsService_EventStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "opentelemetry/proto/collector/arrow/v1/arrow_service.proto",
}
