// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArrowServiceClient is the client API for ArrowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArrowServiceClient interface {
	// The ArrowStream endpoint is a bi-directional stream used to send batch of events (`ArrowBatch`) from the exporter
	// to the collector. The collector returns `ArrowStatus` messages to acknowledge the `ArrowBatch` messages received.
	ArrowStream(ctx context.Context, opts ...grpc.CallOption) (ArrowService_ArrowStreamClient, error)
}

type arrowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArrowServiceClient(cc grpc.ClientConnInterface) ArrowServiceClient {
	return &arrowServiceClient{cc}
}

func (c *arrowServiceClient) ArrowStream(ctx context.Context, opts ...grpc.CallOption) (ArrowService_ArrowStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArrowService_ServiceDesc.Streams[0], "/opentelemetry.proto.collector.arrow.v1.ArrowService/ArrowStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &arrowServiceArrowStreamClient{stream}
	return x, nil
}

type ArrowService_ArrowStreamClient interface {
	Send(*ArrowBatch) error
	Recv() (*ArrowStatus, error)
	grpc.ClientStream
}

type arrowServiceArrowStreamClient struct {
	grpc.ClientStream
}

func (x *arrowServiceArrowStreamClient) Send(m *ArrowBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *arrowServiceArrowStreamClient) Recv() (*ArrowStatus, error) {
	m := new(ArrowStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArrowServiceServer is the server API for ArrowService service.
// All implementations must embed UnimplementedArrowServiceServer
// for forward compatibility
type ArrowServiceServer interface {
	// The ArrowStream endpoint is a bi-directional stream used to send batch of events (`ArrowBatch`) from the exporter
	// to the collector. The collector returns `ArrowStatus` messages to acknowledge the `ArrowBatch` messages received.
	ArrowStream(ArrowService_ArrowStreamServer) error
	mustEmbedUnimplementedArrowServiceServer()
}

// UnimplementedArrowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArrowServiceServer struct {
}

func (UnimplementedArrowServiceServer) ArrowStream(ArrowService_ArrowStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ArrowStream not implemented")
}
func (UnimplementedArrowServiceServer) mustEmbedUnimplementedArrowServiceServer() {}

// UnsafeArrowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArrowServiceServer will
// result in compilation errors.
type UnsafeArrowServiceServer interface {
	mustEmbedUnimplementedArrowServiceServer()
}

func RegisterArrowServiceServer(s grpc.ServiceRegistrar, srv ArrowServiceServer) {
	s.RegisterService(&ArrowService_ServiceDesc, srv)
}

func _ArrowService_ArrowStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArrowServiceServer).ArrowStream(&arrowServiceArrowStreamServer{stream})
}

type ArrowService_ArrowStreamServer interface {
	Send(*ArrowStatus) error
	Recv() (*ArrowBatch, error)
	grpc.ServerStream
}

type arrowServiceArrowStreamServer struct {
	grpc.ServerStream
}

func (x *arrowServiceArrowStreamServer) Send(m *ArrowStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *arrowServiceArrowStreamServer) Recv() (*ArrowBatch, error) {
	m := new(ArrowBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArrowService_ServiceDesc is the grpc.ServiceDesc for ArrowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArrowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opentelemetry.proto.collector.arrow.v1.ArrowService",
	HandlerType: (*ArrowServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ArrowStream",
			Handler:       _ArrowService_ArrowStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "opentelemetry/proto/collector/arrow/v1/arrow_service.proto",
}
