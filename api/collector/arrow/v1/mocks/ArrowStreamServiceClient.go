// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/f5/otel-arrow-adapter/api/collector/arrow/v1"
)

// ArrowStreamServiceClient is an autogenerated mock type for the ArrowStreamServiceClient type
type ArrowStreamServiceClient struct {
	mock.Mock
}

type ArrowStreamServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ArrowStreamServiceClient) EXPECT() *ArrowStreamServiceClient_Expecter {
	return &ArrowStreamServiceClient_Expecter{mock: &_m.Mock}
}

// ArrowStream provides a mock function with given fields: ctx, opts
func (_m *ArrowStreamServiceClient) ArrowStream(ctx context.Context, opts ...grpc.CallOption) (v1.ArrowStreamService_ArrowStreamClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 v1.ArrowStreamService_ArrowStreamClient
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) v1.ArrowStreamService_ArrowStreamClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.ArrowStreamService_ArrowStreamClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArrowStreamServiceClient_ArrowStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ArrowStream'
type ArrowStreamServiceClient_ArrowStream_Call struct {
	*mock.Call
}

// ArrowStream is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *ArrowStreamServiceClient_Expecter) ArrowStream(ctx interface{}, opts ...interface{}) *ArrowStreamServiceClient_ArrowStream_Call {
	return &ArrowStreamServiceClient_ArrowStream_Call{Call: _e.mock.On("ArrowStream",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *ArrowStreamServiceClient_ArrowStream_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *ArrowStreamServiceClient_ArrowStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *ArrowStreamServiceClient_ArrowStream_Call) Return(_a0 v1.ArrowStreamService_ArrowStreamClient, _a1 error) *ArrowStreamServiceClient_ArrowStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewArrowStreamServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewArrowStreamServiceClient creates a new instance of ArrowStreamServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArrowStreamServiceClient(t mockConstructorTestingTNewArrowStreamServiceClient) *ArrowStreamServiceClient {
	mock := &ArrowStreamServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
