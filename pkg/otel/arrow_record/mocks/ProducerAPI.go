// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	plog "go.opentelemetry.io/collector/pdata/plog"

	ptrace "go.opentelemetry.io/collector/pdata/ptrace"

	v1 "github.com/f5/otel-arrow-adapter/api/collector/arrow/v1"
)

// ProducerAPI is an autogenerated mock type for the ProducerAPI type
type ProducerAPI struct {
	mock.Mock
}

// BatchArrowRecordsFromLogs provides a mock function with given fields: _a0
func (_m *ProducerAPI) BatchArrowRecordsFromLogs(_a0 plog.Logs) (*v1.BatchArrowRecords, error) {
	ret := _m.Called(_a0)

	var r0 *v1.BatchArrowRecords
	if rf, ok := ret.Get(0).(func(plog.Logs) *v1.BatchArrowRecords); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BatchArrowRecords)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(plog.Logs) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchArrowRecordsFromTraces provides a mock function with given fields: _a0
func (_m *ProducerAPI) BatchArrowRecordsFromTraces(_a0 ptrace.Traces) (*v1.BatchArrowRecords, error) {
	ret := _m.Called(_a0)

	var r0 *v1.BatchArrowRecords
	if rf, ok := ret.Get(0).(func(ptrace.Traces) *v1.BatchArrowRecords); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.BatchArrowRecords)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ptrace.Traces) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProducerAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewProducerAPI creates a new instance of ProducerAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProducerAPI(t mockConstructorTestingTNewProducerAPI) *ProducerAPI {
	mock := &ProducerAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
