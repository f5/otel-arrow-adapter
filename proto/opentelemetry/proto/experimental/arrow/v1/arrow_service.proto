// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package opentelemetry.proto.experimental.arrow.v1;

option java_multiple_files = true;
option java_package = "io.opentelemetry.proto.experimental.arrow.v1";
option java_outer_classname = "ArrowServiceProto";

// Note the following is temporary
option go_package = "github.com/f5/otel-arrow-adapter/api/experimental/arrow/v1";

// Service that can be used to send `BatchArrowRecords` between one Application instrumented with OpenTelemetry and a
// collector, or between collectors.
service ArrowStreamService {
  // The ArrowStream endpoint is a bi-directional stream used to send batch of `BatchArrowRecords` from the exporter
  // to the collector. The collector returns `BatchStatus` messages to acknowledge the `BatchArrowRecords`
  // messages received.
  rpc ArrowStream(stream BatchArrowRecords) returns (stream BatchStatus) {}
}

// ArrowTracesService is a traces-only Arrow stream.
service ArrowTracesService {
  rpc ArrowTraces(stream BatchArrowRecords) returns (stream BatchStatus) {}
}

// ArrowTracesService is a logs-only Arrow stream.
service ArrowLogsService {
  rpc ArrowLogs(stream BatchArrowRecords) returns (stream BatchStatus) {}
}

// ArrowTracesService is a metrics-only Arrow stream.
service ArrowMetricsService {
  rpc ArrowMetrics(stream BatchArrowRecords) returns (stream BatchStatus) {}
}

// A message sent by an exporter to a collector containing a batch of Arrow records.
message BatchArrowRecords {
  // [mandatory] Batch ID. Must be unique in the context of the stream.
  string batch_id = 1;

  // [mandatory] A collection of payloads containing the data of the batch.
  repeated OtlpArrowPayload otlp_arrow_payloads = 2;

  // [optional] Headers associated with this batch, encoded using hpack.
  bytes headers = 3;
}

// Enumeration of all the OTLP Arrow payload types currently supported by the OTLP Arrow protocol.
enum OtlpArrowPayloadType {
  // Main OTel entities
  // A payload representing a collection of metrics.
  METRICS = 0;
  GAUGE = 1;
  SUM = 2;
  SUMMARIES = 3;
  HISTOGRAMS = 4;
  EXP_HISTOGRAMS = 5;

  // A payload representing a collection of logs.
  LOGS = 6;
  // A payload representing a collection of traces.
  SPANS = 7;

  // Related OTel entities
  // A payload representing a collection of resource attributes.
  RESOURCE_ATTRS = 8;
  // A payload representing a collection of scope attributes.
  SCOPE_ATTRS = 9;
  // A payload representing a collection of metric attributes.
  GAUGE_ATTRS = 10;
  SUM_ATTRS = 11;
  SUMMARY_ATTRS = 12;
  HISTOGRAM_ATTRS = 13;
  EXP_HISTOGRAM_ATTRS = 14;
  // A payload representing a collection of log attributes.
  LOG_ATTRS = 15;
  // A payload representing a collection of span attributes.
  SPAN_ATTRS = 16;
  // A payload representing a collection of span events.
  SPAN_EVENTS = 17;
  // A payload representing a collection of span events attributes.
  SPAN_EVENT_ATTRS = 18;
  // A payload representing a collection of span links.
  SPAN_LINKS = 19;
  // A payload representing a collection of span links attributes.
  SPAN_LINK_ATTRS = 20;
}

// Represents a batch of OTLP Arrow entities.
message OtlpArrowPayload {
  // [mandatory] A unique id assigned to a sub-stream of the batch sharing the same schema, and dictionaries.
  string sub_stream_id = 1;

  // [mandatory] Type of the OTLP Arrow payload.
  OtlpArrowPayloadType type = 2;

  // [mandatory] Serialized Arrow Record Batch
  // For a description of the Arrow IPC format see:
  // https://arrow.apache.org/docs/format/Columnar.html#serialization-and-interprocess-communication-ipc
  bytes record = 3;
}

// A message sent by a Collector to the exporter that opened the data stream.
message BatchStatus {
  repeated StatusMessage statuses = 1;
}

message StatusMessage {
  string batch_id = 1;
  StatusCode status_code = 2;
  ErrorCode error_code = 3;
  string error_message = 4;
  RetryInfo retry_info = 5;
}

enum StatusCode {
  OK = 0;
  ERROR = 1;
}

enum ErrorCode {
  UNAVAILABLE = 0;
  INVALID_ARGUMENT = 1;
}

message RetryInfo {
  int64 retry_delay = 1;
}
